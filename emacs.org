#+TITLE: My Emacs configurations
#+STARTUP: indent
#+OPTIONS: num:nil tags:nil ^:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs config using org-babel

* Initialize
** UTF-8
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC
Using a norwegian keyboard on linux may cause issues with [[https://www.emacswiki.org/emacs/DeadKeys][dead keys]]. iso-transl fixes that.
#+BEGIN_SRC emacs-lisp
  (require 'iso-transl)
#+END_SRC

** Package manager setup
#+BEGIN_SRC emacs-lisp
(require 'cl)
(require 'package)

(defvar gnu '("gnu" . "http://elpa.gnu.org/packages/"))
(defvar melpa '("melpa" . "http://melpa.org/packages/"))
(defvar melpa-stable '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-archives nil)
(add-to-list 'package-archives melpa-stable t)
(add-to-list 'package-archives melpa t)
(add-to-list 'package-archives gnu t)

(package-initialize)
(unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable"))
  (package-refresh-contents))
#+END_SRC

At each load the package list will be evaluated and any missing
packages will be installed. The packages-install function deals with
this check and takes care of any loading of the packages.

#+BEGIN_SRC emacs-lisp
(defun packages-install (&rest packages)
  (message "running packages-install")
  (mapc (lambda (package)
          (let ((name (car package))
                (repo (cdr package)))
            (when (not (package-installed-p name))
              (let ((package-archives (list repo)))
                (package-initialize)
                (package-install name)))))
         packages)
  (package-initialize)
  (delete-other-windows))
#+END_SRC

Install packages, preferably only use-package

#+begin_src emacs-lisp
(defun init--install-packages ()
  (message "Lets install some packages")
  (packages-install
    ;; Since use-package, this is the only entry here.
    ;; ALWAYS try to use use-package!
    (cons 'use-package melpa)
    ))

(condition-case nil
    (init--install-packages)
  (error
    (package-refresh-contents)
    (init--install-packages)))
#+end_src

** Change autosave directory
#+begin_src emacs-lisp
(defvar emacs-autosave-directory "~/.emacs.d/autosaves/")
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+end_src

* Look and feel
** General emacs settings
Change some general settings
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0) ; Turn off menu bar
  (tool-bar-mode 0) ; Turn off tool bar
  (scroll-bar-mode 0) ; Turn off scroll bar
  (blink-cursor-mode 0) ; Stop blinking cursor
  (column-number-mode 1) ; Activate column numbers
  (show-paren-mode 1) ; Show matching parenthesis
  (delete-selection-mode 1) ; Replace selected text
  (setq inhibit-splash-screen t) ; Turn off splash screen
  (setq inhibit-startup-message t) ; Turn off startup message
  (setq initial-scratch-message nil) ; Clean the scratch buffer
  (setq default-directory (concat (getenv "HOME") "/")) ; Set home directory as default
  (fset 'yes-or-no-p 'y-or-n-p) ; Answer with y/n
#+END_SRC

** Navigation
*** Swiper
#+begin_src emacs-lisp
  (use-package counsel :ensure t)

  (use-package swiper
    :ensure t
    :bind*
    (("C-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-c h f" . counsel-describe-function)
     ("C-c h v" . counsel-describe-variable)
     ("C-c i u" . counsel-unicode-char)
     ("M-i" . counsel-imenu)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c l" . counsel-load-theme))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (define-key read-expression-map (kbd "C-r") #'counsel-expression-history)
      (ivy-set-actions
       'counsel-find-file
       '(("d" (lambda (x) (delete-file (expand-file-name x)))
          "delete"
          )))
      (ivy-set-actions
       'ivy-switch-buffer
       '(("k"
          (lambda (x)
            (kill-buffer x)
            (ivy--reset-state ivy-last))
          "kill")
	 ("j"
          ivy--switch-buffer-other-window-action
          "other window")))))

  (use-package ivy-hydra :ensure t)
#+end_src

*** Which key
=which-key= is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. For example, after enabling the minor mode if you enter =C-x= and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow =C-x=
Github repo: [[https://github.com/justbur/emacs-which-key][justbur/emacs-which-key]]
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

*** Custom keybindings
#+begin_src emacs-lisp
(defvar custom-bindings-map (make-keymap)
  "A keymap for custom bindings.")

;; Kills active buffer
(define-key custom-bindings-map (kbd "C-x k") 'kill-this-buffer)
;; Switch to other window
(define-key custom-bindings-map (kbd "<C-tab>") 'other-window)

(define-minor-mode custom-bindings-mode
  "A mode that activates custom-bindings."
  t nil custom-bindings-map)
#+end_src

** Autocomplete
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (ac-config-default)
    (global-auto-complete-mode t))
#+end_src

** Agressive indentation
#+begin_src emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config
  (global-aggressive-indent-mode 1))
#+end_src

** Themeing
*** Load themes
A relaxing dark theme with subtle colors. I prefer [[https://github.com/credmp/arjen-grey-theme][arjen-grey-theme]] by [[https://www.buildfunthings.com][Arjen Wiersma]]. It's a master piece! <3
#+begin_src emacs-lisp
(use-package arjen-grey-theme :ensure t)
#+end_src

*** TODO Download font if neccesary
My preferred font is Ubuntu Mono. Download it from [[https://fonts.google.com/specimen/Ubuntu+Mono][Google Fonts]].
*** Load fonts
#+begin_src emacs-lisp
  (cond ((member "Ubuntu Mono" (font-family-list))
         (set-face-attribute 'default nil :font "Ubuntu Mono-12"))
	    ((member "Consolas" (font-family-list))
	     (set-face-attribute 'default nil :font "Consolas")))
#+end_src

** Removed "ding"
Thanks to [[https://www.buildfunthings.com][Arjen Wiersma]] for showing how to remove the ever annoying *ding*.
#+BEGIN_SRC emacs-lisp
  (defun my-ding-function ())
  (setq ring-bell-function 'my-ding-function)
  (setq visible-bell nil)
#+END_SRC

** Reload buffers on file change
Reload buffers when files change outside emacs.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

* Org-mode
** Visual & highligting
*** Activate clean indentation
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(setq org-startup-truncated nil)
#+END_SRC

*** Modify faces for states
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
	'(("PLANNING" . (:foreground "lightblue"))
	  ("PROJECT" . (:foreground "lightblue" :weight bold))
	  ("GROUP" . (:foreground "grey" :weight bold))
	  ("NEXT-ACTION" . (:foreground "lightyellow" :weight bold))))
#+END_SRC

*** Activate visual line mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (visual-line-mode t)))
#+END_SRC

*** Syntax highlighting in source blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** Key bindings
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (bind-key "<f2>" 'org-refile org-mode-map)
    (bind-key "C-c a" 'org-agenda org-mode-map))
#+END_SRC

** GTD Setup
*** Set agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/Privat.org"
                         "~/Dropbox/org/NG.org"
                         "~/Dropbox/org/HV.org"
                         "~/Dropbox/org/UiO.org"
                         "~/Dropbox/org/Nellon.org"
                         "~/Dropbox/org/Habits.org"
                         "~/Dropbox/org/Inbox.org"))
#+END_SRC

*** Set refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets
  '((nil :todo . "PROJECT")
    (nil :todo . "GROUP")
    ("Privat.org" :tag . "refile")
    ("UiO.org" :tag . "refile")
    ("NG.org" :tag . "refile")
    ("HV.org" :tag . "refile")
    ("Inbox.org" :level . 1)
    ("Nellon.org" :tag . "refile")
    ("Habits.org" :tag . "refile")))
#+END_SRC

*** Activate logbook-drawer
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer "LOGBOOK")
#+END_SRC

*** Capture templates
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f3>") 'org-capture)
  (setq org-capture-templates
	'(("t" "Todo" entry
	   (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
	   (file "~/Dropbox/org/templates/capture-generic.org"))
	   ("e" "Email" entry
	   (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
	   (file "~/Dropbox/org/templates/capture-email.org"))
	   ("b" "Buy" entry
	   (file+headline "~/Dropbox/org/Privat.org" "Handel")
	   (file "~/Dropbox/org/templates/capture-nextaction.org") :immediate-finish t)
	   ("s" "See or read")
	   ("sm" "Movie to watch" entry
	   (file+headline "~/Dropbox/org/Privat.org" "Filmer")
	   (file "~/Dropbox/org/templates/capture-movie.org"))
	   ("sb" "Book to read" entry
	   (file+headline "~/Dropbox/org/Privat.org" "BÃ¸ker")
	   (file "~/Dropbox/org/templates/capture-book.org"))
	   ("st" "TV series to watch" entry
	   (file+headline "~/Dropbox/org/Privat.org" "TV-serier")
	   (file "~/Dropbox/org/templates/capture-tv.org"))
	   ("n" "NG")
	   ("nc" "Change Request" plain
	   (file "~/ONEDRI~1/crq/new.org")
	   (file "~/Dropbox/org/templates/crq.org"))
	   ("nd" "Jira DRIV" entry
	   (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
	   (file "~/Dropbox/org/templates/capture-jira-driv.org"))
	   ("na" "Jira DA" entry
	   (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
	   (file "~/Dropbox/org/templates/capture-jira-da.org"))
	   ("nr" "Incident Remedy" entry
	   (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
	   (file "~/Dropbox/org/templates/capture-remedy.org"))
	   ("nm" "Meeting minutes" entry
	   (file+datetree "~/ONEDRI~1/mom.org")
	   (file "~/Dropbox/org/templates/mom.org"))
	   ("nk" "Kilometers driven" entry
	   (file+headline "~/Dropbox/org/km.org" "New")
	   (file "~/Dropbox/org/templates/capture-km.org") :immediate-finish t)
	   ("u" "University")
	   ("u1" "INF1820 lecture notes" entry
	   (file+datetree "~/Dropbox/emner/inf1820/notater.org")
	   (file "~/Dropbox/org/templates/lecture.org"))
	   ("u3" "INF1820 assignment" plain
	   (file "~/Dropbox/emner/inf1820/oblig.org")
	   (file "~/Dropbox/org/templates/oblig1820.org"))
     ("d" "Getting Things Done")
	   ("dw" "Weekly review" entry
	   (file+weektree "~/Dropbox/org/archive/weekly-review.org")
	   (file "~/Dropbox/org/templates/weekly-review-no.org") :immediate-finish t)
	   ("di" "Empty all inboxes             (C-0 <F3> to insert at point)" entry
	   (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
	   (file "~/Dropbox/org/templates/empty-inboxes.org") :immediate-finish t)
	   ("T" "Travel")
	   ("Tp" "Pre travel checklist             (C-0 <F3> to insert at point)" entry
	   (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
	   (file "~/Dropbox/org/templates/pre-travel.org") :immediate-finish t)
     ("Tb" "Project: Business trip multi-day" entry
     (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
     (file "~/Dropbox/org/templates/trip-business.org") :immediate-finish t)
     ("g" "Gift idea")
	   ("g1" "Mariann" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Mariann")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g2" "Egil" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Egil")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g3" "Petrine" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Petrine")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g4" "Karoline" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Karoline")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g5" "Joachim" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Joachim")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g6" "Mikael" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Mikael")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g7" "Agnes" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Agnes")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g8" "Noralf" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Noralf")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g9" "Emilie" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Emilie")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("g0" "PÃ¥l" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "PÃ¥l")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("ga" "Lars" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Lars")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("gb" "Marius" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Marius")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("gc" "Ella" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Ella")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("gd" "Ludvik" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Ludvik")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ("ge" "Kristine" entry
	   (file+headline "~/Dropbox/org/Gaver.org" "Kristine")
	   (file "~/Dropbox/org/templates/capture-generic.org") :immediate-finish t)
	   ))
#+END_SRC
*** Habits module
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-modules 'org-habit)
(setq org-habit-preceding-days 7
      org-habit-following-days 1
      org-habit-graph-column 70
      org-habit-show-habits-only-for-today t
      org-habit-show-all-today t)
#+END_SRC

*** Custom Agenda views
**** Functions for structuring data
I use a tag for releases, and for some views I want to only show the release tag.
#+BEGIN_SRC emacs-lisp
(defun mk/org-get-release-from-tags (tags)
  "Input a list of strings. Use (split-string TAGSTRING \":\")
Returns the tag matching r[0-9]+(\\.[0-9]+)? or nil"
  (cond ((null tags) nil)
	((string-match "r[0-9]+\\(\\.[0-9]+\\)?" (car tags)) (car tags))
	((null (cdr tags)) nil)
	((mk/org-get-release-from-tags (cdr tags)))))

(defun mk/org-get-release-from-string (tagstring)
  "Input a string of tags seperated with \:
Returns the tag matching r[0-9]+(\\.[0-9]+)? or nil"
  (if (null tagstring) nil
    (mk/org-get-release-from-tags (split-string tagstring ":"))))
#+END_SRC
**** Custom prefix formats
***** Archive times
I use this prefix format to get information from my archive. The properties-drawer on the items in my archive looks something like this:
#+BEGIN_QUOTE
ARCHIVE_TIME: <date of archive>
ARCHIVE_FILE: <path>
ARCHIVE_OLPATH: <org-path>
ARCHIVE_CATEGORY: <category>
ARCHIVE_TODO: <state of task when archived>
ARCHIVE_ITAGS: <tags>
#+END_QUOTE
The prefix will be something like this: /W<week number of archive time>: <archive time> (<tags>)/
#+BEGIN_SRC emacs-lisp
  (defun mk/org-entry-get-archive ()
    (let* ((week-number (concat "W" (format-time-string "%V" (org-time-string-to-time (org-entry-get (point) "ARCHIVE_TIME")))))
	   (archive-date (format-time-string "%Y-%m-%d" (org-time-string-to-time (org-entry-get (point) "ARCHIVE_TIME"))))
	   (release (mk/org-get-release-from-string (or (org-entry-get (point) "ARCHIVE_ITAGS") (org-entry-get (point) "TAGS")))))
      (concat week-number " | " archive-date " | " (format "%-5s" release))))
#+END_SRC
***** Reference property
:PROPERTIES:
:REF: JiraID
:END:
For a weekly status report, I report progress on Jira issues and other internal references. I store these references as a property called =REF=.
#+BEGIN_SRC emacs-lisp
  (defun mk/org-entry-get-ref ()
    (let* ((maxlen 12)
	   (ref (format (concat "%-" (int-to-string maxlen) "s") (or (org-entry-get (point) "REF" t) "")))
	   (release (format "%-5s" (or (mk/org-get-release-from-string (or (org-entry-get (point) "TAGS" t)
									   (org-entry-get (point) "ITAGS"))) ""))))
      (concat (format (concat "%-" (int-to-string (+ 1 maxlen)) "s") (subseq ref 0 (or (search ":" ref) maxlen)))
	      " " release)))
#+END_SRC
**** Custom skip functions
For my weekly status report, I want to know what has been archived the current and last week.
#+BEGIN_SRC emacs-lisp
  (defun mk/org-agenda-skip-archive ()
    (let* ((today (org-time-string-to-absolute (format-time-string "%Y-%m-%d")))
	   (archive-date (org-time-string-to-absolute (org-entry-get (point) "ARCHIVE_TIME")))
	   (day-of-week (string-to-number (format-time-string "%u"))))
      (if (org-time> archive-date (- today day-of-week 7))
	  nil
	(save-excursion (outline-next-heading) (point)))))
#+END_SRC
**** Setup of agenda views
***** Old components
****** Components
******* Habits
Important habits for all agenda views
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-habits-important
	'(agenda ""
		  ((org-agenda-files (quote ("~/Dropbox/org/Habits.org")))
		   (org-agenda-span 1)
		   (org-agenda-tag-filter-preset (quote ("-habit")))
		   (org-agenda-overriding-header "Habits"))))
#+END_SRC
All habits
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-habits-all
	'(agenda ""
		  ((org-agenda-files (quote ("~/Dropbox/org/Habits.org")))
		   (org-agenda-span 1)
		   (org-agenda-overriding-header "Habits"))))
#+END_SRC
******* Agenda
******** NG
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-agenda-ng
	'(agenda ""
		 ((org-agenda-files (quote ("~/Dropbox/org/NG.org")))
            (org-agenda-tag-filter-preset (quote ("-SOMEDAY" "-ON_HOLD"))))))
#+END_SRC
******** Private
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-agenda-private
	'(agenda ""
		 ((org-agenda-files (quote ("~/Dropbox/org/Privat.org"
					    "~/Dropbox/org/UiO.org"
					    "~/Dropbox/org/HV.org"
					    "~/Dropbox/org/Nellon.org")))
		  (org-agenda-tag-filter-preset (quote "-habit")))))
#+END_SRC
******* Todo
******** NG
Next actions
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-nextaction-ng
	'(todo "NEXT-ACTION"
	       ((org-agenda-files (quote ("~/Dropbox/org/NG.org")))
		(org-agenda-tag-filter-preset (quote ("-SOMEDAY" "-ON_HOLD")))
		(org-agenda-overriding-header "Next actions @ NG"))))
#+END_SRC
Minutes of meeting
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-mom-ng
  '(todo "TODO"
	       ((org-agenda-files (quote ("~/ONEDRI~1/mom.org")))
		(org-agenda-overriding-header "Minutes of meeting"))))
#+END_SRC
Projects on hold
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-on-hold-ng
	'(todo "PROJECT"
	       ((org-agenda-files (quote ("~/Dropbox/org/NG.org")))
		(org-agenda-tag-filter-preset (quote ("+ON_HOLD")))
		(org-agenda-overriding-header "Projects on hold @ NG"))))
#+END_SRC
Someday / maybe
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-someday-ng
	'(todo "PROJECT"
	       ((org-agenda-files (quote ("~/Dropbox/org/NG.org")))
		(org-agenda-tag-filter-preset (quote ("+SOMEDAY")))
		(org-agenda-overriding-header "Someday / maybe @ NG"))))
#+END_SRC
******** Private
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-component-nextaction-private
	'(todo "NEXT-ACTION"
	       ((org-agenda-files (quote ("~/Dropbox/org/Privat.org"
					  "~/Dropbox/org/UiO.org"
					  "~/Dropbox/org/HV.org"
					  "~/Dropbox/org/Nellon.org")))
		(org-agenda-tag-filter-preset (quote ("-habit" "-buy")))
		(org-agenda-overriding-header "Next actions: Private"))))
#+END_SRC
****** Commands
******* Generic command
#+BEGIN_SRC emacs-lisp
  (defun mk/org-agenda-custom-command-generic (key name tag) 
    (list key name 'tags-todo (concat "+" tag)
	  (list(list 'org-agenda-overriding-header name))))
#+END_SRC
******* Work
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-work
	(list "w" "Work" (list mk/org-agenda-custom-component-habits-important
			       mk/org-agenda-custom-component-agenda-ng
			       mk/org-agenda-custom-component-nextaction-ng)))
#+END_SRC

******* Home
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-private
	(list "p" "Private" (list mk/org-agenda-custom-component-habits-important
				  mk/org-agenda-custom-component-agenda-private
				  mk/org-agenda-custom-component-nextaction-private)))
#+END_SRC
******* Next Actions
******** Description
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-nextactions
	'("n" . "Next Actions"))
#+END_SRC
******** NG
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-nextactions-ng
	(list "nn" "Next Actions: NG" (list mk/org-agenda-custom-component-nextaction-ng)))
#+END_SRC
******** Private
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-nextactions-private
	(list "np" "Next Actions: Private" (list mk/org-agenda-custom-component-nextaction-private)))
#+END_SRC
******** All
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-nextactions-all
	(list "na" "Next Actions: All" (list mk/org-agenda-custom-component-nextaction-ng
					     mk/org-agenda-custom-component-nextaction-private)))
#+END_SRC
******* Contexts
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-context
	'("c" . "Contexts"))
#+END_SRC
******** Generic context command
#+BEGIN_SRC emacs-lisp
  (defun mk/org-agenda-custom-command-context-generic (key name tag)
    (mk/org-agenda-custom-command-generic (concat "c" key) (concat "Context: " name) tag))
#+END_SRC
******* Agenda
******** Description
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-agenda
	'("g" . "Agenda lists"))
#+END_SRC
******* Org maintenance
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-maintenance
	'("o" . "ORG maintenance"))
#+END_SRC
******** Refile list
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-maintenance-refile
    (mk/org-agenda-custom-command-generic "or" "Refile list" "refile"))
#+END_SRC
******** Minutes of meeting
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-maintenance-mom
    (list "om" "Minutes of Meeting: NG" (list mk/org-agenda-custom-component-mom-ng)))
#+END_SRC
******* Someday / maybe & on hold
******** Description
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-someday
  '("l" . "On hold & Someday / maybe"))
#+END_SRC
******** NG
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-someday-ng
    (list "lw" "Work" (list mk/org-agenda-custom-component-on-hold-ng
                            mk/org-agenda-custom-component-someday-ng)))
#+END_SRC
******* Habits
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-command-habits
	(list "h" "Habits" (list mk/org-agenda-custom-component-habits-all)))
#+END_SRC
****** DRIVE
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-drive
	'("d" . "DRIVE Status"))
#+END_SRC
******* DRIVE Status
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-drive-status
	'("ds" "DRIVE Status"
	  ((agenda ""
		   ((org-agenda-overriding-header "Planned activities")
		    (org-agenda-span 14)
		    (org-agenda-category-filter-preset (quote ("+DRIVE")))
		    (org-agenda-prefix-format "%(mk/org-entry-get-ref)")))
	   (todo "PROJECT"
		 ((org-agenda-overriding-header "Unfinished projects")
		  (org-agenda-sorting-strategy (quote (tag-up priority-down)))
		  (org-agenda-category-filter-preset (quote ("+DRIVE")))
		  (org-agenda-prefix-format "%(mk/org-entry-get-ref)"))))
	  nil nil))
#+END_SRC
******* DRIVE Archive
#+BEGIN_SRC emacs-lisp
  (setq mk/org-agenda-custom-drive-archive
	'("da" "DRIVE Archive" tags "+ARCHIVE_CATEGORY=\"DRIVE\""
	  ((org-agenda-overriding-header "DRIVE Archive")
	   (org-agenda-files (quote ("~/Dropbox/org/archive/archive.org")))
	   (org-agenda-skip-function (quote (mk/org-agenda-skip-archive)))
	   (org-agenda-prefix-format "%(mk/org-entry-get-archive)"))))
#+END_SRC
***** New components
****** Next actions list
#+BEGIN_SRC emacs-lisp
  (defun mk/org-custom-generic-nextaction (files)
    (list 'todo "NEXT-ACTION"
          (list (list 'org-agenda-files files)
           (list 'org-agenda-tag-filter-preset (quote '("-SOMEDAY" "-ON_HOLD")))
           (list 'org-agenda-overriding-header "Next Actions"))))
#+END_SRC
****** Active projects list
#+BEGIN_SRC emacs-lisp
  (defun mk/org-custom-generic-project (files)
    (list 'todo "PROJECT"
          (list (list 'org-agenda-files files)
           (list 'org-agenda-tag-filter-preset (quote '("-SOMEDAY" "-ON_HOLD")))
           (list 'org-agenda-overriding-header "Projects"))))
#+END_SRC
****** Someday / maybe list
#+BEGIN_SRC emacs-lisp
  (defun mk/org-custom-generic-someday (files)
    (list 'todo "PROJECT"
          (list (list 'org-agenda-files files)
           (list 'org-agenda-tag-filter-preset (quote '("+SOMEDAY")))
           (list 'org-agenda-overriding-header "Someday / Maybe"))))
#+END_SRC
****** Projects on hold
#+BEGIN_SRC emacs-lisp
  (defun mk/org-custom-generic-onhold (files)
    (list 'todo "PROJECT"
          (list (list 'org-agenda-files files)
           (list 'org-agenda-tag-filter-preset (quote '("+ON_HOLD")))
           (list 'org-agenda-overriding-header "Projects On Hold"))))
#+END_SRC
****** Waiting for list
#+BEGIN_SRC emacs-lisp
  (defun mk/org-custom-generic-waiting (files)
    (list 'todo "WAITING"
          (list (list 'org-agenda-files files)
           (list 'org-agenda-tag-filter-preset (quote '("-SOMEDAY" "-ON_HOLD")))
           (list 'org-agenda-overriding-header "Waiting For"))))
#+END_SRC
****** Agenda list
#+BEGIN_SRC emacs-lisp
  (defun mk/org-custom-generic-agenda (key name tag)
    (list (concat "g" key) name 'tags-todo (concat "+" tag)
      (list(list 'org-agenda-tag-filter-preset (quote '("-SOMEDAY" "-ON_HOLD")))
           (list 'org-agenda-overriding-header (concat "Agenda for " name)))))
#+END_SRC
****** Contexts
#+BEGIN_SRC emacs-lisp
  (defun mk/org-custom-generic-context (key name tag)
    (list (concat "c" key) name 'tags-todo (concat "+" tag)
      (list(list 'org-agenda-tag-filter-preset (quote '("-SOMEDAY" "-ON_HOLD")))
           (list 'org-agenda-overriding-header (concat "Context: " name)))))
#+END_SRC
****** Maintenance
#+BEGIN_SRC emacs-lisp
  (setq mk/org-custom-refile
    (list "or" "Refile list" 'tags-todo "+REFILE"
      (list(list 'org-agenda-overriding-header "Refile list"))))

  (setq mk/org-custom-mom
    (list "om" "Minutes of Meeting" 'todo "TODO"
      (list(list 'org-agenda-files (quote '("~/ONEDRI~1/mom.org")))
           (list 'org-agenda-overriding-header "Minutes of meeting"))))

  (setq mk/org-custom-km
    (list "wk" "Kilometers to expence" 'todo "TODO"
      (list(list 'org-agenda-files (quote '("~/Dropbox/org/km.org")))
           (list 'org-agenda-overriding-header "Kilometers to expence"))))
#+END_SRC
***** Setup
#+BEGIN_SRC emacs-lisp :results none
  (setq org-agenda-custom-commands
        (list '("w" . "Work")
              (append '("wn" "Next Actions")    (mk/org-custom-generic-nextaction (quote '("~/Dropbox/org/NG.org"))))
              (append '("wp" "Projects")        (mk/org-custom-generic-project    (quote '("~/Dropbox/org/NG.org"))))
              (append '("ws" "Someday/Maybe")   (mk/org-custom-generic-someday    (quote '("~/Dropbox/org/NG.org"))))
              (append '("wh" "On hold")         (mk/org-custom-generic-onhold     (quote '("~/Dropbox/org/NG.org"))))
              (append '("ww" "Waiting for")     (mk/org-custom-generic-waiting    (quote '("~/Dropbox/org/NG.org"))))
              (append '("wk" "Kms to expence")  (mk/org-custom-generic-nextaction (quote '("~/Dropbox/org/km.org"))))
              '("p" . "Private")
              (append '("pn" "Next Actions")    (mk/org-custom-generic-nextaction (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              (append '("pp" "Projects")        (mk/org-custom-generic-project    (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              (append '("ps" "Someday/Maybe") (mk/org-custom-generic-someday      (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              (append '("ph" "On hold")         (mk/org-custom-generic-onhold     (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              (append '("pw" "Waiting for")     (mk/org-custom-generic-waiting    (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              '("l" . "All")
              (append '("ln" "Next Actions")    (mk/org-custom-generic-nextaction (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/NG.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              (append '("lp" "Projects")        (mk/org-custom-generic-project    (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/NG.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              (append '("ls" "Someday/Maybe") (mk/org-custom-generic-someday      (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/NG.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              (append '("lh" "On hold")         (mk/org-custom-generic-onhold     (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/NG.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              (append '("lw" "Waiting for")     (mk/org-custom-generic-waiting    (quote '("~/Dropbox/org/Privat.org"
                                                                                           "~/Dropbox/org/NG.org"
                                                                                           "~/Dropbox/org/UiO.org"
                                                                                           "~/Dropbox/org/HV.org"
                                                                                           "~/Dropbox/org/Nellon.org"
                                                                                           "~/Dropbox/org/Habits.org"))))
              '("g" . "Agenda lists")
              (mk/org-custom-generic-agenda "p" "Per Olav" "PESPOR")
              (mk/org-custom-generic-agenda "m" "Maria" "MACRIS")
              (mk/org-custom-generic-agenda "j" "Jon Arne" "JOBJER")
              (mk/org-custom-generic-agenda "a" "Marie" "MAHELL")
              (mk/org-custom-generic-agenda "e" "Paal" "PAAL")
              (mk/org-custom-generic-agenda "h" "Haakon" "HAHAAR")
              (mk/org-custom-generic-agenda "o" "Johan H" "JOHANS")
              (mk/org-custom-generic-agenda "r" "Rune S" "RUSKOG")
              (mk/org-custom-generic-agenda "h" "Rune H" "RUHAAG")
              (mk/org-custom-generic-agenda "l" "John" "JLO")
              '("c" . "Contexts")
              (mk/org-custom-generic-context "s" "Shopping list" "BUY")
              (mk/org-custom-generic-context "h" "Home" "HOME")
              (mk/org-custom-generic-context "b" "BV9" "BV9")
              '("o" . "ORG Maintenance")
              mk/org-custom-refile
              mk/org-custom-mom))
#+END_SRC
*** Define stuck projects
#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects
   (quote
    ("-ON_HOLD-SOMEDAY/+PROJECT"
     ("NEXT-ACTION" "WAITING")
     nil "")))
#+END_SRC

** Exporters
Setting UTF8 for exports
#+BEGIN_SRC emacs-lisp
  (setq org-export-coding-system 'utf-8)
#+END_SRC
*** Jira
#+BEGIN_SRC emacs-lisp
(use-package ox-jira :ensure t)
#+END_SRC

*** Twitter bootstrap
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs :ensure t)
#+END_SRC

*** Nikola
#+BEGIN_SRC emacs-lisp
  (use-package ox-nikola :ensure t)
#+END_SRC

** Org babel settings
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (shell . t)))
  (setq org-babel-python-command "python3")
#+END_SRC

* Development
** Common tools
*** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t)
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC

** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "C-c m") 'magit-status))
#+end_src

** Lisp
*** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :diminish paredit-mode
  :config
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode))
#+END_SRC

*** Use paredit everywhere
#+BEGIN_SRC emacs-lisp
(use-package paredit-everywhere
  :ensure t
  :diminish paredit-everywhere-mode
  :config
  (add-hook 'prog-mode-hook #'paredit-everywhere-mode))
#+END_SRC

*** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'lisp-mode-hook
            (lambda ()
              (rainbow-delimiters-mode))))
#+END_SRC

** Python
*** python-mode
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t
    :init
    (if (eq system-type 'windows-nt)
        (setq py-shell-name "C:/a/Python/Python35-32/python.exe")
        (setq py-shell-name "python3"))
    :config
    (setq py-split-window-on-execute t))
  (add-hook 'python-mode-hook (setenv "LANG" "en_US.UTF8"))
#+END_SRC
Use M-x write-abbrev-file and just hit RET when asked for a filename.
*** jedi
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC
Use M-x jedi:install-server to install jedi server. Python virtual environment required.
#+BEGIN_QUOTE
[sudo] pip install virtualenv
#+END_QUOTE

** Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas
  :config
  (yas/global-mode 1)
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets"))
#+END_SRC

* Experiments
** elfeed and elfeed-org
*** First I setup elfeed.el
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
  :ensure t
  :config (setq elfeed-search-filter "@6-months-ago") ; I want to show everything, so I removed " +unread"
  :bind ("C-x w" . elfeed))
#+END_SRC
On Windows, libxml2 is not typically installed with Emacs, and elfeed will produce the error:
#+BEGIN_QUOTE
Elfeed: libxml2 functionality is unavailable
#+END_QUOTE
One of my computers is a Windows box on which I am using Emacs 25.
A solution for this is descibed in [[https://github.com/cpitclaudel/company-coq/issues/20][this github-issue]], by cpitclaudel [2016-09-27 ti]:
#+BEGIN_QUOTE
Download emacs 25 from ftp://ftp.gnu.org/gnu/emacs/windows/emacs-25.1-x86_64-w64-mingw32.zip
Download the dependencies from http://alpha.gnu.org/gnu/emacs/pretest/windows/emacs-25-x86_64-deps.zip
Unpack both in the same place and try again
#+END_QUOTE
*** Next, load elfeed-org.el to read the feed-file in org-mode
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
  :ensure t
  :init (setq rmh-elfeed-org-files (list "~/Dropbox/org/rss-feeds.org"))
  :config (elfeed-org))
#+END_SRC
