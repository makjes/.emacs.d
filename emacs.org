# +TITLE: "My Emacs configurations"
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs config using org-babel

* Initialize
** UTF-8
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** Package setup
#+BEGIN_SRC emacs-lisp
(require 'cl)
(require 'package)

;; (setq package-enable-at-startup nil)

(defvar gnu '("gnu" . "http://elpa.gnu.org/packages/"))
(defvar melpa '("melpa" . "http://melpa.org/packages/"))
(defvar melpa-stable '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-archives nil)
(add-to-list 'package-archives melpa-stable t)
(add-to-list 'package-archives melpa t)
(add-to-list 'package-archives gnu t)

(package-initialize)
(unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable"))
  (package-refresh-contents))
#+END_SRC

At each load the package list will be evaluated and any missing
packages will be installed. The packages-install function deals with
this check and takes care of any loading of the packages.

#+BEGIN_SRC emacs-lisp
(defun packages-install (&rest packages)
  (message "running packages-install")
  (mapc (lambda (package)
          (let ((name (car package))
                (repo (cdr package)))
            (when (not (package-installed-p name))
              (let ((package-archives (list repo)))
                (package-initialize)
                (package-install name)))))
         packages)
  (package-initialize)
  (delete-other-windows))
#+END_SRC

Install packages, preferably only use-package

#+begin_src emacs-lisp
(defun init--install-packages ()
  (message "Lets install some packages")
  (packages-install
    ;; Since use-package, this is the only entry here.
    ;; ALWAYS try to use use-package!
    (cons 'use-package melpa)
    ))

(condition-case nil
    (init--install-packages)
  (error
    (package-refresh-contents)
    (init--install-packages)))
#+end_src
** Change autosave directory
#+begin_src emacs-lisp
(defvar emacs-autosave-directory "~/.emacs.d/autosaves/")
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))
#+end_src
* Look and feel
** General emacs settings
- Turn off menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
#+END_SRC
- Turn off tool bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
#+END_SRC
- Turn off scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode 0)
#+END_SRC
- Stop blinking cursor
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
- Activate column numbers
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC
- Show matching parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
- Replace selected text
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
- Turn off splash screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC
- Turn off startup message
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
- Clean the scratch buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC
- Set home directory as default
#+BEGIN_SRC emacs-lisp
  (setq default-directory (concat (getenv "HOME") "/"))
#+END_SRC
- Answer with y/n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Navigation
*** Swiper
#+begin_src emacs-lisp
(use-package counsel :ensure t)

(use-package swiper
  :ensure t
  :bind*
  (("C-s" . swiper)
   ("C-c C-r" . ivy-resume)
   ("M-x" . counsel-M-x)
   ("C-x C-f" . counsel-find-file)
   ("C-c h f" . counsel-describe-function)
   ("C-c h v" . counsel-describe-variable)
   ("C-c i u" . counsel-unicode-char)
   ("M-i" . counsel-imenu)
   ("C-c g" . counsel-git)
   ("C-c j" . counsel-git-grep)
   ("C-c l" . counsel-load-theme))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (define-key read-expression-map (kbd "C-r") #'counsel-expression-history)
    (ivy-set-actions
     'counsel-find-file
     '(("d" (lambda (x) (delete-file (expand-file-name x)))
        "delete"
        )))
    (ivy-set-actions
     'ivy-switch-buffer
     '(("k"
        (lambda (x)
          (kill-buffer x)
          (ivy--reset-state ivy-last))
        "kill")
       ("j"
        ivy--switch-buffer-other-window-action
        "other window")))))

(use-package ivy-hydra :ensure t)
#+end_src
*** Which key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src
*** Custom keybindings
#+begin_src emacs-lisp
(defvar custom-bindings-map (make-keymap)
  "A keymap for custom bindings.")

;; Kills active buffer
(define-key custom-bindings-map (kbd "C-x k") 'kill-this-buffer)
;; Switch to other window
(define-key custom-bindings-map (kbd "<C-tab>") 'other-window)

(define-minor-mode custom-bindings-mode
  "A mode that activates custom-bindings."
  t nil custom-bindings-map)
#+end_src
** Autocomplete
#+begin_src emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
    
#+end_src
** Agressive indentation
#+begin_src emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config
  (global-aggressive-indent-mode 1))
#+end_src
** Themeing

Load themes

#+begin_src emacs-lisp

(use-package arjen-grey-theme :ensure t)

#+end_src

Change font

#+begin_src emacs-lisp

(add-to-list 'default-frame-alist '(font . "Consolas"))
(set-face-attribute 'default t :font "Consolas")

#+end_src
** Removed "ding"
#+BEGIN_SRC emacs-lisp
(defun my-ding-function ())
(setq ring-bell-function 'my-ding-function)
(setq visible-bell nil)
#+END_SRC
** Feelgood word wrapping
#+BEGIN_SRC emacs-lisp
;(setq global-visual-line-mode 1)
#+END_SRC
* General stuff
Reload buffers when files change outside emacs
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
* Org-mode
** Activate clean indentation
ølsdlfølsdf s dføs ldøfsd fløsld f sdf ls dlfs dlfø sdl fl sød opsdf
#+BEGIN_SRC emacs-lisp
;(setq org-indent-mode t)
(setq org-startup-indented t)
(setq org-startup-truncated nil)
#+END_SRC
** Key bindings
#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (:map org-mode-map
         ("<f2>" . org-refile)
         ("C-c a" . org-agenda)))
  
#+END_SRC
** Set agenda files
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/Privat.org"
                         "~/Dropbox/org/NG.org"
                         "~/Dropbox/org/HV.org"
                         "~/Dropbox/org/UiO.org"
                         "~/Dropbox/org/Nellon.org"
                         "~/Dropbox/org/Habits.org"
                         "~/Dropbox/org/Inbox.org"))
#+END_SRC
** Set refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets
  '((nil :maxlevel . 1)
    ("Privat.org" :maxlevel . 1)
    ("UiO.org" :maxlevel . 1)
    ("NG.org" :maxlevel . 1)
    ("HV.org" :maxlevel . 1)
    ("Inbox.org" :level . 1)
    ("Nellon.org" :maxlevel . 1)
    ("Habits.org" :maxlevel . 1)))
#+END_SRC
** Set archive location
#+BEGIN_SRC emacs-lisp
(setq org-archive-location "~/Dropbox/org/archive/archive.org::* From %s")
#+END_SRC
** Set TODO states
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT-ACTION(a!)" "WAITING(w@/!)" "|")
        (sequence "PLANNING(l)" "PROJECT(p)" "|")
        (sequence "SOMEDAY(s)")
        (sequence "|" "DONE(d!)" "CANCELED(c)")))
#+END_SRC
** Activate logbook-drawer
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer "LOGBOOK")
#+END_SRC
** Syntax highlighting in source blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
** Modify faces for states
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(("PLANNING" . (:foreground "lightblue" :weight bold))
        ("PROJECT" . (:foreground "lightblue"))
        ("NEXT-ACTION" . (:foreground "lightyellow" :weight bold))))
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f3>") 'org-capture)
(setq org-capture-templates
 '(("w" "Weekly review" entry
      (file+weektree "~/Dropbox/org/archive/weekly-review.org")
      (file "~/.emacs.d/templates/weekly-review-no.org"))
   ("e" "Email" entry
      (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
      (file "~/.emacs.d/templates/capture-email.org"))
   ("t" "Todo" entry
      (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
      (file "~/.emacs.d/templates/capture-generic.org"))
   ("m" "Movie to watch" entry
      (file+headline "~/Dropbox/org/Privat.org" "Filmer")
      (file "~/.emacs.d/templates/capture-movie.org"))
   ("s" "TV series to watch" entry
      (file+headline "~/Dropbox/org/Privat.org" "TV-serier")
      (file "~/.emacs.d/templates/capture-tv.org"))
   ("d" "Documents")
   ("dc" "Change Request" plain
      (file "~/ONEDRI~1/crq/new.org")
      (file "~/.emacs.d/templates/crq.org"))
   ("j" "Jira")
   ("jd" "DRIV" entry
      (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
      (file "~/.emacs.d/templates/capture-jira-driv.org"))
   ("ja" "DA" entry
      (file+headline "~/Dropbox/org/Inbox.org" "Inbox")
      (file "~/.emacs.d/templates/capture-jira-da.org"))))
#+END_SRC
** org-habit
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-modules 'org-habit)
(setq org-habit-preceding-days 7
      org-habit-following-days 1
      org-habit-graph-column 70
      org-habit-show-habits-only-for-today t
      org-habit-show-all-today t)
#+END_SRC
** Jira
#+BEGIN_SRC emacs-lisp
(use-package ox-jira :ensure t)
#+END_SRC
** Custom Agenda views
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
   (quote
    (("w" "Work"
      ((agenda ""
	       ((org-agenda-files
		 (quote
		  ("~/Dropbox/org/Habits.org")))
		(org-agenda-span 1)
		(org-agenda-overriding-header "Habits")))
       (agenda ""
	       ((org-agenda-files
		 (quote
		  ("~/Dropbox/org/NG.org")))))
       (todo "NEXT-ACTION"
	     ((org-agenda-files
	       (quote
		("~/Dropbox/org/NG.org")))
	      (org-agenda-overriding-header "Next actions @ NG"))))
      nil)
     ("h" "Home"
      ((agenda ""
	       ((org-agenda-files
		 (quote
		  ("~/Dropbox/org/Habits.org")))
		(org-agenda-overriding-header "Habits")
		(org-agenda-span 1)))
       (agenda ""
	       ((org-agenda-files
		 (quote
		  ("~/Dropbox/org/Privat.org" "~/Dropbox/org/HV.org" "~/Dropbox/org/UiO.org" "~/Dropbox/org/Nellon.org")))))
       (tags-todo "home"
		  ((org-agenda-sorting-strategy
		    (quote
		     (todo-state-up)))
		   (org-agenda-overriding-header "@Home"))))
      nil nil)
     ("n" . "Next Actions")
     ("nn" "Next Actions: NG" todo "NEXT-ACTION"
      ((org-agenda-overriding-header "Next Actions: NG")
       (org-agenda-files
	(quote
	 ("~/Dropbox/org/NG.org")))))
     ("np" "Next Actions: Private" todo "NEXT-ACTION"
      ((org-agenda-overriding-header "Next Actions: Private -home (Private/UiO/HV/Nellon)")
       (org-agenda-files
	(quote
	 ("~/Dropbox/org/Privat.org" "~/Dropbox/org/UiO.org" "~/Dropbox/org/HV.org" "~/Dropbox/org/Nellon.org")))
       (org-agenda-tag-filter-preset
	(quote
	 ("-home")))))
     ("na" "Next Actions: All" todo "NEXT-ACTION"
      ((org-agenda-overriding-header "Next Actions: All (-habit -home)")
       (org-agenda-tag-filter-preset
	(quote
	 ("-habit" "-home")))))
     ("p" "Projects to plan" todo "PLANNING"
      ((org-agenda-overriding-header "Projects to plan")))
     ("g" . "Agenda: Persons")
     ("gp" "Agenda: Per Olav" tags-todo "+pespor"
      ((org-agenda-overriding-header "Agenda: Per Olav")))
     ("gm" "Agenda: Maria" tags-todo "+macris"
      ((org-agenda-overriding-header "Agenda: Maria")))
     ("gb" "Agenda: Jon Arne B" tags-todo "+jabjer"
      ((org-agenda-overriding-header "Agenda: Jon Arne B")))
     ("gt" "Agenda: Marie T H" tags-todo "+mahell"
      ((org-agenda-overriding-header "Agenda: Marie T H")))
     ("gj" "Agenda: Janne" tags-todo "+janne"
      ((org-agenda-overriding-header "Agenda: Janne")))
     ("ge" "Agenda: Pål E" tags-todo "+pål"
      ((org-agenda-overriding-header "Agenda: Pål E")))
     ("gh" "Agenda: Håkon H" tags-todo "+hahaar"
      ((org-agenda-overriding-header "Agenda: Håkon H"))))))
#+END_SRC
** Define stuck projects
#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects
   (quote
    ("/+PROJECT"
     ("TODO" "NEXT-ACTION" "WAITING")
     nil "")))
#+END_SRC
** Activate visual line mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (visual-line-mode t)))
#+END_SRC
* Development
** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "C-c m") 'magit-status))
#+end_src
** Lisp
*** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :diminish paredit-mode
  :config
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode))
#+END_SRC
*** Use paredit everywhere
#+BEGIN_SRC emacs-lisp
(use-package paredit-everywhere
  :ensure t
  :diminish paredit-everywhere-mode
  :config
  (add-hook 'prog-mode-hook #'paredit-everywhere-mode))
#+END_SRC
*** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'lisp-mode-hook
            (lambda ()
              (rainbow-delimiters-mode))))
#+END_SRC
** Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas
  :config
  (yas/global-mode 1)
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets"))
#+END_SRC
* Experiments
